[Commands]
1\Name=Toggle Show As Plain Text
1\Command="copyq:\nconst mime = 'application/x-copyq-show-plain';\nconst sel = ItemSelection().current();\nif (sel.length) {\n    const enabled = str(sel.itemAtIndex(0)[mime]) == '1';\n    sel.setItemsFormat(mime, enabled ? undefined : '1');\n} else {\n    const enabled = str(data(mime)) == '1';\n    if (enabled)\n        removeData(mimeHtml);\n}"
1\Icon=A
2\Name=Render Markdown
2\Command="copyq:\nconst markdownTag = 'markdown'\nconst mimeTags = 'application/x-copyq-tags'\nconst tagFragments = ['@']\nconst textFragments = [\n    '`',\n    '\\n##',\n    '](',\n    '\\n* ',\n]\nconst errorLabel = 'Markdown Error'\n\nfunction contains(text, what) {\n    return text.indexOf(what) != -1\n}\n\nfunction startsWith(text, what) {\n    return what === text.substring(0, what.length)\n}\n\nfunction matchesAnyOf(text, fragments) {\n    return fragments.find(e => text.indexOf(e) != -1)\n}\n\nfunction addHtml(html, tag) {\n    setData(mimeHtml, html)\n    if (tag) {\n        tags = data(mimeTags)\n        tags = (tags ? str(tags) + ',' : '') + tag\n        setData(mimeTags, tags)\n    }\n    return true\n}\n\nfunction addHtmlOutput(result, tag) {\n    if (!result) {\n        notification(\n            '.id', 'highlight',\n            '.message', 'Failed to add syntax highlighting',\n        )\n        return false\n    }\n\n    if (result.exit_code !== 0) {\n        popup(errorLabel, result.stderr)\n        return false\n    }\n\n    return addHtml(result.stdout, tag)\n}\n\nfunction markdown(textData) {\n    result = execute('marked', null, textData)\n    return addHtmlOutput(result, markdownTag)\n}\n\nfunction highlightCode() {\n    var formats = dataFormats()\n    if ( formats.indexOf(mimeHidden) != -1\n      || formats.indexOf(mimeHtml) != -1 ) {\n        return false\n    }\n\n    var textData = data(mimeText)\n    var text = str(textData)\n    if (!text)\n        return false\n\n    tags = str(data(mimeTags))\n\n    try {\n        if ( startsWith(text, 'http') )\n            return markdown(textData, 'md')\n\n        if ( matchesAnyOf(tags, tagFragments)\n          || matchesAnyOf(text, textFragments) ) {\n            return markdown(textData)\n        }\n    } catch(e) {\n        popup(errorLabel, e)\n        serverLog(errorLabel + ': ' + e)\n    }\n\n    return false\n}\n\nhighlightCode()"
2\Icon=
3\Name=Image Tab
3\Command="copyq:\nconst imageTab = '&Images';\n\nfunction hasImageFormat(formats) {\n    for (const format of formats.values()) {\n        if (format.startsWith('image/'))\n            return true;\n    }\n    return false;\n}\n\nconst formats = dataFormats();\nif (hasImageFormat(formats)) {\n    setData(mimeOutputTab, imageTab);\n}"
3\Icon=
4\Name=Filter Images
4\Command=copyq:\nfilter('^image/.*')
4\Icon=
5\Name=Pin
5\Command=copyq: plugins.itempinned.pin()
5\InMenu=true
5\Icon=
6\Name=Unpin
6\Command=copyq: plugins.itempinned.unpin()
6\InMenu=true
6\Icon=
6\InternalId=copyq_pinned_unpin
7\Name=Tag as “Important”
7\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
7\InMenu=true
7\Icon=
7\InternalId=copyq_tags_tag:Important
size=17
8\Name=Remove tag “Important”
8\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
8\Icon=
8\InternalId=copyq_tags_untag:Important
9\Name=Add a Tag
9\Command=copyq: plugins.itemtags.tag()
9\Icon=
9\InternalId=copyq_tags_tag
10\Name=Remove a Tag
10\Command=copyq: plugins.itemtags.untag()
10\Icon=
10\InternalId=copyq_tags_untag
11\Name=Clear all tags
11\Command=copyq: plugins.itemtags.clearTags()
11\Icon=
11\InternalId=copyq_tags_clear
8\InMenu=true
12\Name=Show main window under mouse cursor
12\Command=copyq: showAt()
12\Icon=
12\InternalId=copyq_global_show_under_mouse
9\InMenu=true
13\Name=Paste clipboard as plain text
13\Command="copyq: \nvar text = clipboard()\ncopy(text)\ncopySelection(text)\npaste()"
13\IsGlobalShortcut=true
13\Icon=
13\InternalId=copyq_global_paste_clipboard_plain
1\Display=true
2\Display=true
3\Enable=false
6\Input=application/x-copyq-item-pinned
8\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
10\InMenu=true
11\Input=application/x-copyq-tags
11\InMenu=true
14\Name=Paste current date and time
14\Command="copyq: \n// http://doc.qt.io/qt-5/qdatetime.html#toString\nvar format = 'dddd, MMMM d, yyyy h:mm:ss AP'\nvar dateTime = dateString(format)\ncopy(dateTime)\ncopySelection(dateTime)\npaste()\n"
14\IsGlobalShortcut=true
14\Icon=
14\InternalId=copyq_global_paste_datetime
15\Name=Show/hide main window
15\Command=copyq: toggle()
15\IsGlobalShortcut=true
15\Icon=
15\InternalId=copyq_global_toggle
2\Enable=false
16\Name=Paste and copy next
16\Command="copyq: paste(); next()"
16\IsGlobalShortcut=true
16\Icon=
16\InternalId=copyq_global_paste_copy_next
1\InMenu=true
1\Enable=false
1\Shortcut=ctrl+shift+x
3\Automatic=true
3\Tab=notes
4\InMenu=true
4\Shortcut=ctrl+i
5\Input=!OUTPUT
5\Output=application/x-copyq-item-pinned
5\InternalId=copyq_pinned_pin
7\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
10\Input=application/x-copyq-tags
12\IsGlobalShortcut=true
12\GlobalShortcut=ctrl+shift+`
17\Name=Paste as Plain Text
17\Command="copyq:\nvar text = input()\ncopy(text)\ncopySelection(text)\npaste()"
17\Input=text/plain
17\InMenu=true
17\HideWindow=true
17\Icon=
17\Shortcut=ctrl+shift+v
