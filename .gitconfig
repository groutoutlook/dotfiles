[user]
	name = groutoutlook
	email = 150989799+groutoutlook@users.noreply.github.com
	# Put this in your ~/.gitconfig or ~/.config/git/config
# Windows users: "~" is your profile's home directory, e.g. C:\Users\<YourName>
[color]
  # Enable colors in color-supporting terminals
  ui = auto
[alias]
  # List available aliases
  aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
  ; st = status
  st = status -sb
  sw = switch
  sw- = switch -

  # Command shortcuts
  c-1 = log -1 --pretty=%B
  
  wip = commit -am 'ðŸš§  wip'
  wipp = !"git add * && git wip && git puf"
  
  # Display tree-like log, because default log is a painâ€¦
  lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
  
  # Useful when you have to update your last commit
  # with staged files without editing the commit message.
  oops = commit --amend --no-edit
  # Ensure that force-pushing won't lose someone else's work (only mine).
  puf = push --force-with-lease
  rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
  # List local commits that were not pushed to remote repository
  review-local = "!git lg @{push}.."
  rv-local = "!git lg @{push}.."
  # Edit last commit message
  reword = commit --amend
  
  # Undo last commit but keep changed files in stage
  uncommit = !"git c-1 && git reset --soft HEAD~1"
  
  # Remove file(s) from Git but not from disk
  utr = rm --cache --

  main = !"git branch -m main && git push -u origin main"
  # My addition.
  rhh = reset --hard
  rsh = uncommit
  rs1 = uncommit
  reapply     = !"git add * && gitPrev=$(git rs1) && git add * && git commit -m \"$gitPrev\" && git puf"
  reapplyslow = !"git add * && gitPrev=$(git rs1) && git add * && git commit  && git puf"
  rap = reapply
  raps = reapplyslow
  ci = commit
  cij = !"git add . && gitmoji -c && git push"
  suup = submodule update --remote
  suin = submodule update --init
[core]
  # Don't paginate output by default
  pager = bat
  # Global ignore file (not shared)
	excludesfile = 
  # Global shared hooks directory
  # hooksPath = ~/.githooks
  # VSCode
  editor = nvim
  # Don't consider trailing space change as a cause for merge conflicts
  whitespace = -trailing-space
	autocrlf = true
	longpaths = true
[diff]
  # Use better, descriptive initials (c, i, w) instead of a/b.
  mnemonicPrefix = true
  # Show renames/moves as such
  renames = true
  # When using --word-diff, assume --word-diff-regex=.
  wordRegex = .
  # Display submodule-related information (commit listings)
  submodule = log
  # Use VSCode as default diff tool when running `git diff-tool`
  tool = vscode
  # pager for git, bat
  show = bat
[pager]
	diff = bat
	log = bat
	reflog = bat
	show = bat
[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE
[fetch]
  # Auto-fetch submodule changes (sadly, won't auto-update)
  recurseSubmodules = on-demand
[grep]
  break = true
  heading = true
  lineNumber = true
  # Consider most regexes to be ERE
  extendedRegexp = true
[log]
  # Use abbrev SHAs whenever possible/relevant instead of full 40 chars
  abbrevCommit = true
  # Automatically --follow when given a single path
  follow = true
  # Disable decorate for reflog
  # (because there is no dedicated `reflog` section available)
  decorate = false
[merge]
  # Display common-ancestor blocks in conflict hunks
  # conflictStyle = diff3
  # Disable fast-forward merges as default merge strategy.
  # Force explicit call of `git merge --ff â€¦`.
  ff = false
  # Custom/dedicated merge drive for npm lock files (`package-lock.json`).
  # Also works with Yarn.
  # Use Git attributes to set targeted files (located at `~/.config/git/attributes``
  # when installed with npm).
  # See https://www.npmjs.com/package/npm-merge-driver
  # [merge "npm-merge-driver"]
  # name = automatically merge npm lockfiles
  # driver = npx npm-merge-driver merge %A %O %B %P
  tool = vscode # "smerge"
[mergetool]

  # Clean up backup files created by merge tools on tool exit
  keepBackup = false
  # Clean up temp files created by merge tools on tool exit
  keepTemporaries = false
  # Put the temp files in a dedicated dir anyway
  writeToTemp = true
  # Auto-accept file prompts when launching merge tools
  prompt = false

[mergetool "vscode"]
  name = "VS Code"
	trustExitCode = true
	cmd = code -wait -m $LOCAL $REMOTE $BASE $MERGED
[pull]
  # This is GREATâ€¦ when you know what you're doing and are careful
  # not to pull --no-rebase over a local line containing a true merge.
  # rebase = true
  # This option, which does away with the one gotcha of
  # auto-rebasing on pulls, is only available from 1.8.5 onwards.
  # rebase = preserve
  # WARNING! This option, which is the latest variation, is only
  # available from 2.18 onwards.
  rebase = merges
[push]
  # Default push should only push the current branch to its push target, regardless of its remote name
  default = upstream
  # When pushing, also push tags whose commit-ishs are now reachable upstream
  followTags = true
# [rebase]
  # Rebase advanced usage.
  # Automagically reorder and prefix your commands while doing an interactive
  # rebase. This has to be used with `--fixup` and/or `--squash` options for
  # `git commit`.
  # autoSquash = true
  # Automatically stash current WD and stage when running rebase
  # then you won't have to manually `git stash push` and `git stash pop`
  # after and before your rebase.
  autoStash = true
[rerere]
  # If, like me, you like rerere, uncomment these
  autoupdate = true
  enabled = true
[bat]
	file-decoration-style = black ul
	file-style = black
	hunk-header-decoration-style = black box
	hunk-header-line-number-style = black
	line-numbers = true
	line-numbers-left-format = {nm:>3}Â¦
	line-numbers-left-style = black
	line-numbers-minus-style = black
	line-numbers-plus-style = black
	line-numbers-right-format = {np:>3}Â¦
	line-numbers-right-style = black
	line-numbers-zero-style = black
	minus-emph-style = red bold
	minus-empty-line-marker-style = omit
	minus-style = red
	navigate = false
	plus-emph-style = green bold
	plus-empty-line-marker-style = omit
	plus-style = green
	side-by-side = false
	syntax-theme = base16-ocean.dark
	true-color = auto
	zero-style = black
[status]
  # Display submodule rev change summaries in status
  submoduleSummary = true
  # Recursively traverse untracked directories to display all contents
  showUntrackedFiles = all
[color "branch"]
  # Blue on black is hard to read in git branch -vv: use cyan instead
  upstream = cyan
[tag]
  # Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
  sort = version:refname
[versionsort]
  prereleaseSuffix = -pre
  prereleaseSuffix = .pre
  prereleaseSuffix = -beta
  prereleaseSuffix = .beta
  prereleaseSuffix = -rc
  prereleaseSuffix = .rc
[help]
	autocorrect = 1
[difftool "sourcetree"]
	cmd = "'' "
[mergetool "sourcetree"]
	cmd = "'' "
	trustExitCode = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[safe]
    directory = D:/ProgramDataD/Notes/Obsidian/Vault_2401
	directory = *
[submodule]
	recurse = true
[credential "https://github.com"]
	helper = store
	helper = !gh auth git-credential
	; helper = !/data/data/com.termux/files/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = store
	helper = !gh auth git-credential
	; helper = !/data/data/com.termux/files/usr/bin/gh auth git-credential
[credential "https://gitlab.com"]
  helper = store
  helper = !glab auth git-credential
