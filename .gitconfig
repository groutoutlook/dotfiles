[color]
	# Enable colors in color-supporting terminals
	ui = auto
[alias]
	h = !geschichte
	# List available aliases
	aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
	al = aliases
	# st = status
	st = status -sb
	sst = show --stat
	sw = switch
	sww = switch -

	# Command shortcuts
	c1 = log -1 --pretty=%B
	c-1 = c1

	wip = commit -am 'ðŸš§  wip'
	wipp = !"git add . && git wip && git puf"

	# lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
	dst = diff --stat
	dft = difftool
	dift = difftool
	dlog = "-c diff.external=difft log -p --ext-diff"
	ll = ln --decorate --numstat
	# Ensure that force-pushing won't lose someone else's work (only mine).
	puf = push --force-with-lease
	rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
	# List local commits that were not pushed to remote repository
	review-local = "!git lg @{push}.."
	rv-local = "!git lg @{push}.."
	# Edit last commit message
	reword = !"git commit -v --amend && git puf && gh browse"

	# Remove file(s) from Git but not from disk
	utr = rm --cache --
	main = !"git branch -m main && git push -u origin main"
	# My addition.
	rhh = !"git reset --hard && git clean -fd"
	# Undo last commit but keep changed files in stage
	oldcommit = !"git c1 && git reset --soft HEAD~1"
	rsh = oldcommit
	rs1 = oldcommit
	reapply     = !"gitPrev=$(git rs1) && git add . && git commit -m \"$gitPrev\" && git puf"
	reapplyslow = !"gitPrev=$(git rs1) && git add . && git commit -m \"$gitPrev\""
	rap = reapply
	ras = reapplyslow
	raps = reapplyslow
	cif = !"git add . && git commit -v && git puf"

	suup = submodule update --remote
	suin = submodule update --init
	chp = cherry-pick -
	quick-stats = !C:\\Users\\COHOTECH\\scoop\\apps\\git-quick-stats\\current\\git-quick-stats
	br = branch
	mt = mergetool
	task = !~/.cargo/bin/git-task
	stk = !git stash store $(git stash create)
	stss = stashes

  	last-touched = for-each-ref --sort=authordate --format '%0a%(refname:short)%0a%(authordate:relative)' 'refs/remotes/'
	su = standup -s -Dshort


[core]
	# Don't paginate output by default
	pager = "bat"
	# Global ignore file (not shared)
	excludesfile = 
	# Global shared hooks directory
	# hooksPath = ~/.githooks
	# VSCode
	editor = helix
	# Don't consider trailing space change as a cause for merge conflicts
	whitespace = -trailing-space
	autocrlf = false
	longpaths = true
	attributesfile = ~/.gitattributes
[diff]
	# Use better, descriptive initials (c, i, w) instead of a/b.
	mnemonicPrefix = true
	# Show renames/moves as such
	renames = true
	# When using --word-diff, assume --word-diff-regex=.
	wordRegex = .
	# Display submodule-related information (commit listings)
	submodule = log
	# tool = vscode
	tool = diffsitter
[difftool]
	prompt = false
[difftool "diffsitter"]
	cmd = diffsitter "$LOCAL" "$REMOTE"[difftool "difftastic"]
	prompt = false
	cmd = difft "$LOCAL" "$REMOTE"
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
[pager]
	difftool = true
	diff = "bat --paging=never"
	# log = bat
	reflog = "bat --paging=never"
[fetch]
	# Auto-fetch submodule changes (sadly, won't auto-update)
	recurseSubmodules = on-demand
[grep]
	break = true
	heading = true
	lineNumber = true
	# Consider most regexes to be ERE
	extendedRegexp = true
[log]
	# Use abbrev SHAs whenever possible/relevant instead of full 40 chars
	abbrevCommit = true
	# Automatically --follow when given a single path
	follow = true
	# Disable decorate for reflog
	# (because there is no dedicated `reflog` section available)
	decorate = false
[merge]
	# Display common-ancestor blocks in conflict hunks
	# conflictStyle = diff3
	# Disable fast-forward merges as default merge strategy.
	# Force explicit call of `git merge --ff â€¦`.
	ff = false
	# Custom/dedicated merge drive for npm lock files (`package-lock.json`).
	# Also works with Yarn.
	# Use Git attributes to set targeted files (located at `~/.config/git/attributes``
	# when installed with npm).
	# See https://www.npmjs.com/package/npm-merge-driver
	# [merge "npm-merge-driver"]
	# name = automatically merge npm lockfiles
	# driver = npx npm-merge-driver merge %A %O %B %P
	tool = vscode # "smerge"
	# conflictStyle = diff3
[merge "mergiraf"]
    name = mergiraf
    driver = mergiraf merge --git %O %A %B -s %S -x %X -y %Y -p %P -l %L
[mergetool]
	# Clean up backup files created by merge tools on tool exit
	keepBackup = false
	# Clean up temp files created by merge tools on tool exit
	keepTemporaries = false
	# Put the temp files in a dedicated dir anyway
	writeToTemp = true
	# Auto-accept file prompts when launching merge tools
	prompt = false
[mergetool "vscode"]
	name = "VS Code"
	trustExitCode = true
	cmd = code -wait -m $LOCAL $REMOTE $BASE $MERGED
[pull]
	# This is GREATâ€¦ when you know what you're doing and are careful
	# not to pull --no-rebase over a local line containing a true merge.
	# rebase = true
	# This option, which does away with the one gotcha of
	# auto-rebasing on pulls, is only available from 1.8.5 onwards.
	# rebase = preserve
	# WARNING! This option, which is the latest variation, is only
	# available from 2.18 onwards.
	rebase = merges
[push]
	# Default push should only push the current branch to its push target, regardless of its remote name
	default = upstream
	# When pushing, also push tags whose commit-ishs are now reachable upstream
	followTags = true
[rebase]
	# Rebase advanced usage.
	# Automagically reorder and prefix your commands while doing an interactive
	# rebase. This has to be used with `--fixup` and/or `--squash` options for
	# `git commit`.
	autoSquash = true
	# Automatically stash current WD and stage when running rebase
	# then you won't have to manually `git stash push` and `git stash pop`
	# after and before your rebase.
	autoStash = true
[rerere]
	# If, like me, you like rerere, uncomment these
	autoupdate = true
	enabled = true
[bat]
	file-decoration-style = black ul
	file-style = black
	hunk-header-decoration-style = black box
	hunk-header-line-number-style = black
	line-numbers = true
	line-numbers-left-format = {nm:>3}Â¦
	line-numbers-left-style = black
	line-numbers-minus-style = black
	line-numbers-plus-style = black
	line-numbers-right-format = {np:>3}Â¦
	line-numbers-right-style = black
	line-numbers-zero-style = black
	minus-emph-style = red bold
	minus-empty-line-marker-style = omit
	minus-style = red
	navigate = false
	plus-emph-style = green bold
	plus-empty-line-marker-style = omit
	plus-style = green
	side-by-side = false
	syntax-theme = base16-ocean.dark
	true-color = auto
	zero-style = black
[status]
	# Display submodule rev change summaries in status
	submoduleSummary = true
	# Recursively traverse untracked directories to display all contents
	showUntrackedFiles = all
[color "branch"]
	# Blue on black is hard to read in git branch -vv: use cyan instead
	upstream = cyan
[tag]
	# Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
	sort = version:refname
[versionsort]
	prereleaseSuffix = -pre
	prereleaseSuffix = .pre
	prereleaseSuffix = -beta
	prereleaseSuffix = .beta
	prereleaseSuffix = -rc
	prereleaseSuffix = .rc
[help]
	autocorrect = 1
[difftool "sourcetree"]
	cmd = "'' "
[mergetool "sourcetree"]
	cmd = "'' "
	trustExitCode = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[safe]
	# directory = D:/ProgramDataD/Notes/Obsidian/Vault_2401
	directory = *
[submodule]
	recurse = true
[credential]
	# username = "groutoutlook"
[credential "https://github.com"]
	username = "groutoutlook"
	helper = store
	helper = !gh auth git-credential
	# helper = !/data/data/com.termux/files/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = store
	helper = !gh auth git-credential
	# helper = !/data/data/com.termux/files/usr/bin/gh auth git-credential
[credential "https://gitlab.com"]
	helper = store
	helper = !glab auth git-credential
[credential "helperselector"]
	selected = manager
	# INFO
[bitmapPseudoMerge "all"]
	pattern = 'refs/(heads|tags)/'
	threshold = now
	stableThreshold = never
[feature]
	experimental = true
[sequence]
	editor = interactive-rebase-tool
[credential "https://git.code.sf.net"]
	provider = generic
[init]
	defaultBranch = main
[credential "https://myhost.com"]
	provider = generic
# [sendemail]
[gpg]
	program = gpg
[include]
	path = ~/gitalias.txt
	path = ~/gitemail.txt
	path = ~/gituser.txt
# [extensions]
#     refStorage = reftable